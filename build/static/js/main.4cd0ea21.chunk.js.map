{"version":3,"sources":["context/TodosContext.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodoLoader.tsx","App.tsx","index.tsx"],"names":["TodosContext","React","createContext","TodoItem","todo","index","useContext","removeTodo","todoToggle","classTodo","completed","className","type","checked","onChange","bind","id","title","onClick","TodoList","todos","TransitionGroup","component","map","idx","CSSTransition","timeout","classNames","TodoLoader","AddTodo","lazy","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","setTimeout","contextContent","filter","Provider","value","Suspense","fallback","createTodo","concat","Date","now","length","render","document","getElementById"],"mappings":"gPAGaA,EAAeC,IAAMC,cAAsC,I,OCM3DC,EAAoC,SAAC,GAG3C,IAFNC,EAEK,EAFLA,KACAC,EACK,EADLA,MAEA,EAAiCC,qBAAWN,GAArCO,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,WACbC,EAAoBL,EAAKM,UAAY,kBAAoB,GAE/D,OACC,qBAAIC,UAAU,aAAd,UACC,uBACCA,UAAWF,EADZ,UAGC,uBACCG,KAAK,WACLC,QAAST,EAAKM,UACdI,SAAUN,EAAYO,KAAK,KAAMX,EAAKY,MAEvC,mCAASX,EAAQ,EAAjB,UACCD,EAAKa,SAEP,wBACCC,QAASX,EAAYQ,KAAK,KAAMX,EAAKY,IACrCL,UAAU,KAFX,sB,8BClBUQ,EAAoC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEnD,OACC,cAACC,EAAA,EAAD,CAAiBC,UAAU,KAAKX,UAAU,aAA1C,SACES,EAAMG,KAAI,SAACnB,EAAMoB,GACjB,OACC,cAACC,EAAA,EAAD,CAECC,QAAS,IACTC,WAAY,YAHb,SAKC,cAAC,EAAD,CACCvB,KAAMA,EACNC,MAAOmB,KANHpB,EAAKY,UCfHY,G,MAAuB,WAEnC,OACC,sBAAKjB,UAAU,aAAf,UAA4B,wBAAW,6BCGnCkB,EAAUC,gBAAK,kBAAM,gCAEdC,EAAgB,WAC3B,MAA0BC,mBAAsB,IAAhD,mBAAOZ,EAAP,KAAca,EAAd,KACA,EAA8BD,oBAAkB,GAAhD,mBAAOE,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,MAAM,uDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAlB,GAGJqB,YAAW,WACTR,EAASb,GACTe,GAAW,KACV,UAEN,IAEH,IAuBMO,EAAmE,CACvEnC,WAjBiB,SAACS,GAClBiB,EAASb,EAAMuB,QAAO,SAAAvC,GAAI,OAAIA,EAAKY,KAAOA,OAiB1CR,WAzBiB,SAACQ,GACpBiB,EAASb,EAAMG,KAAI,SAAAnB,GAEf,OADIA,EAAKY,KAAOA,IAAIZ,EAAKM,WAAaN,EAAKM,WACpCN,QAyBX,OACE,cAACJ,EAAa4C,SAAd,CAAuBC,MAAQH,EAA/B,SACE,sBAAK/B,UAAU,UAAf,UACE,4CAEA,cAAC,IAAMmC,SAAP,CAAgBC,SAAU,6DAA1B,SACE,cAAClB,EAAD,CAASmB,WAvBE,SAACH,GAClBZ,EAASb,EAAM6B,OAAO,CACpB,CACEhC,MAAO4B,EACP7B,GAAIkC,KAAKC,MACTzC,WAAW,WAqBVwB,GAAW,cAAC,EAAD,IACXd,EAAMgC,OACL,cAAC,EAAD,CAAUhC,MAAOA,IACfc,EAAU,KACZ,mBAAGvB,UAAU,YAAb,4CChEV0C,iBACE,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4cd0ea21.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { iTodosContext } from \"../interfaces/interfaces\"\r\n\r\nexport const TodosContext = React.createContext<Partial<iTodosContext>>({})","import React, { useContext } from \"react\"\r\nimport { iTodoItem } from \"../interfaces/interfaces\"\r\nimport { TodosContext } from '../context/TodosContext'\r\n\r\ntype TodoItemProps = {\r\n\ttodo: iTodoItem\r\n\tindex: number\r\n}\r\n\r\nexport const TodoItem: React.FC<TodoItemProps> = ({\r\n\ttodo,\r\n\tindex\r\n}) => {\r\n\tconst {removeTodo, todoToggle} = useContext(TodosContext)\r\n\tconst classTodo: string = todo.completed ? 'todo__completed' : ''\r\n\r\n\treturn (\r\n\t\t<li className=\"todo__item\">\r\n\t\t\t<span\r\n\t\t\t\tclassName={classTodo}\r\n\t\t\t>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\tchecked={todo.completed}\r\n\t\t\t\t\tonChange={todoToggle!.bind(null, todo.id)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t<strong>{index + 1}&nbsp;</strong>\r\n\t\t\t\t{todo.title}\r\n\t\t\t</span>\r\n\t\t\t<button\r\n\t\t\t\tonClick={removeTodo!.bind(null, todo.id)}\r\n\t\t\t\tclassName=\"rm\"\r\n\t\t\t>&times;</button>\r\n\t\t</li>\r\n\t)\r\n}","import React from \"react\"\r\nimport { iTodoItem } from \"../interfaces/interfaces\"\r\nimport { TodoItem } from \"./TodoItem\"\r\nimport '../assets/scss/todo/Todos.scss'\r\nimport '../assets/scss/todo/TodoTransitions.scss'\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\r\n\r\ntype TodoListProps = {\r\n\ttodos: iTodoItem[]\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => {\r\n\r\n\treturn (\r\n\t\t<TransitionGroup component=\"ul\" className=\"todo__list\">\r\n\t\t\t{todos.map((todo, idx) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<CSSTransition\r\n\t\t\t\t\t\tkey={todo.id}\r\n\t\t\t\t\t\ttimeout={800}\r\n\t\t\t\t\t\tclassNames={'todo-item'}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<TodoItem\r\n\t\t\t\t\t\t\ttodo={todo}\r\n\t\t\t\t\t\t\tindex={idx}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</CSSTransition>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t</TransitionGroup>\r\n\t)\r\n}","import React from \"react\"\r\nimport '../assets/scss/todo/Loader.scss'\r\n\r\nexport const TodoLoader: React.FC = () => {\r\n\r\n\treturn (\r\n\t\t<div className=\"lds-ripple\"><div></div><div></div></div>\r\n\t)\r\n}","import React, { useState, lazy } from 'react'\nimport { TodoList } from './components/TodoList'\nimport { iTodoItem, iTodosContext } from './interfaces/interfaces'\nimport { TodosContext } from './context/TodosContext'\nimport { useEffect } from 'react'\nimport { TodoLoader } from './components/TodoLoader'\n\n// import AddTodo from './components/AddTodo'\n// Lazy loading for the AddTodo component\nconst AddTodo = lazy(() => import('./components/AddTodo'))\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<iTodoItem[]>([])\n  const [loading, setLoading] = useState<boolean>(true)\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n      .then(response => response.json())\n      .then(todos => {\n\n        // Emulating server's respond delay\n        setTimeout(() => {\n          setTodos(todos)\n          setLoading(false)\n        }, 1000)\n      })\n  }, [])\n\n  const todoToggle = (id: number): void => {\n\t\tsetTodos(todos.map(todo => {\n      if (todo.id === id) todo.completed = !todo.completed\n      return todo\n    }))\n\t}\n\n  const removeTodo = (id: number): void => {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  const createTodo = (value: string): void => {\n    setTodos(todos.concat([\n      {\n        title: value,\n        id: Date.now(),\n        completed: false\n      }\n    ]))\n  }\n\n  // to say typescript that we must pass this two mandatory functions, also we can use the next:\n  // * const contextContent: Required<iTodosContext> = {\n  const contextContent: Pick<iTodosContext, 'removeTodo' | 'todoToggle'> = {\n    removeTodo,\n    todoToggle\n  }\n\n  return (\n    <TodosContext.Provider value={ contextContent }>\n      <div className=\"wrapper\">\n        <h1>Todos form</h1>\n\n        <React.Suspense fallback={<p>Loading AppTodo component...</p>}>\n          <AddTodo createTodo={createTodo} />\n        </React.Suspense>\n\n        {loading && <TodoLoader />}\n        {todos.length ? (\n          <TodoList todos={todos} />\n        ) : loading ? null : (\n          <p className=\"left-zero\">There are no todos left!</p>\n        )}\n        \n      </div>\n    </TodosContext.Provider>\n  )\n}","import React from 'react'\nimport { render } from 'react-dom'\nimport './assets/scss/main.scss'\nimport { App } from './App'\n\nrender(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}